{"version":3,"sources":["components/Navbar.js","components/Home.js","components/People.js","components/Planets.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","inverted","Container","to","Item","name","Home","People","data","Grid","columns","map","people","i","Column","Card","Content","Header","Description","height","mass","hair_color","Planets","planets","climate","diameter","population","App","useState","setPeople","setPlanets","loading","setLoading","useEffect","a","fetch","res","json","results","fetchPeople","fetchPlanets","Dimmer","active","Loader","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ce5b21f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Menu, Container} from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <Menu inverted>\r\n             \r\n             <Container>\r\n\r\n              <Link to='/'>\r\n                 <Menu.Item name='star wars  API'/>\r\n\r\n              </Link>\r\n              \r\n\r\n              <Link to='/people'>\r\n              <Menu.Item name='people'/>\r\n\r\n              </Link>\r\n\r\n              <Link to='/planets'>\r\n              <Menu.Item name='planets'/>\r\n\r\n              </Link>\r\n                     \r\n\r\n\r\n             </Container>\r\n\r\n             \r\n\r\n        </Menu>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n           <p>Home</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Card, Grid} from 'semantic-ui-react';\r\n\r\n\r\nexport default function People({data}) {\r\n    return (\r\n        <>\r\n           <h1>People</h1> \r\n           <Grid columns={3}>\r\n                \r\n                {data.map((people,i) => {\r\n                      \r\n                      return(\r\n                          <Grid.Column key={i}>\r\n                              <Card>\r\n                                  <Card.Content>\r\n                                       <Card.Header>{people.name}</Card.Header>\r\n                                       <Card.Description>\r\n                                            <strong>Height</strong>\r\n                                            <p>{people.height}</p>\r\n\r\n                                            <strong>Mass</strong>\r\n                                            <p>{people.mass}</p>\r\n\r\n                                            <strong>Hair Color </strong>\r\n                                            <p>{people.hair_color}</p>\r\n                                       </Card.Description>\r\n\r\n                                   </Card.Content>\r\n                              </Card>\r\n\r\n                          </Grid.Column>\r\n\r\n                      )\r\n                })}\r\n           </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Card, Grid} from 'semantic-ui-react';\r\n\r\n\r\nexport default function Planets({data}) {\r\n    return (\r\n        <>\r\n           <h1>Planet</h1> \r\n           <Grid columns={3}>\r\n                \r\n                {data.map((planets,i) => {\r\n                      \r\n                      return(\r\n                          <Grid.Column key={i}>\r\n                              <Card>\r\n                                  <Card.Content>\r\n                                       <Card.Header>{planets.name}</Card.Header>\r\n                                       <Card.Description>\r\n                                            <strong>Climate</strong>\r\n                                            <p>{planets.climate}</p>\r\n\r\n                                            <strong>Diameter</strong>\r\n                                            <p>{planets.diameter}</p>\r\n\r\n                                            <strong>Population </strong>\r\n                                            <p>{planets.population}</p>\r\n                                       </Card.Description>\r\n\r\n                                   </Card.Content>\r\n                              </Card>\r\n\r\n                          </Grid.Column>\r\n\r\n                      )\r\n                })}\r\n           </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React , {useState,useEffect} from 'react';\nimport Navbar from './components/Navbar';\nimport {BrowserRouter as Router, Switch,Route} from 'react-router-dom'; //checar\nimport {Container,Dimmer,Loader} from 'semantic-ui-react';\nimport Home from './components/Home';\nimport People from './components/People';\nimport Planets from './components/Planets';\n\nfunction App() {\n\n  const [people,setPeople] = useState([]);\n  const [planets,setPlanets] = useState([]);\n  const [loading,setLoading] = useState([true]);\n\n  useEffect( ()=> {\n       \n    async function fetchPeople(){\n          \n      let res = await fetch('https://www.swapi.tech/api/people/?format=json');\n      let data = await res.json();\n      setPeople(data.results);\n      setLoading(false);\n\n\n    }\n    \n\n    async function fetchPlanets(){\n          \n      let res = await fetch('https://www.swapi.tech/api/planets/?format=json');\n      let data = await res.json();\n      setPlanets(data.results);\n      setLoading(false);\n\n    }\n\n    fetchPeople();\n    fetchPlanets();\n\n  },[])\n  \n\n  return (\n    \n\n\n     <Router>\n     <Navbar/>\n     <Container>\n          {loading ?(\n\n             <Dimmer active inverted>\n                  <Loader inverted> Loading  </Loader>\n\n\n             </Dimmer>\n\n          ): (\n              \n            <Switch>\n            <Route exact path='/'>\n                <Home />\n            </Route>\n            \n            <Route exact path='/people'>\n                <People data={people} />\n            </Route>\n\n            <Route exact path='/planets'>\n                <Planets data={planets} />\n            </Route>\n\n            </Switch>\n          )}\n\n\n          \n\n\n    </Container>\n\n     </Router>\n\n           \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}